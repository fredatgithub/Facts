<#@ template debug="false" hostspecific="false" language="C#" #>
<#
    var Arguments = new Func<int, string>
    (
        (int index) =>
        {
            if (index != 0)
            {
                if (index == 1)
                {
                    return "obj";
                }
                else 
                {
                    string result = string.Empty;
                    var first = true;
                    for(var subindex = 1; subindex <= index; subindex++)
                    {
                        if (first)
                        {
                            first = false;
                        }
                        else 
                        {
                            result += ", ";
                        }
                        result += "arg" + subindex;
                    }
                    return result;
                }
            }
            else 
            {
                return string.Empty;
            }
        }
    );

    var Parameters = new Func<int, string>
    (
        (int index) =>
        {
            if (index != 0)
            {
                if (index == 1)
                {
                    return "T obj";
                }
                else 
                {
                    string result = string.Empty;
                    var first = true;
                    for(var subindex = 1; subindex <= index; subindex++)
                    {
                        if (first)
                        {
                            first = false;
                        }
                        else 
                        {
                            result += ", ";
                        }
                        result += "T" + subindex + " arg" + subindex;
                    }
                    return result;
                }
            }
            else 
            {
                return string.Empty;
            }
        }
    );

    var Types = new Func<int, string>
    (
        (int index) =>
        {
            if (index != 0)
            {
                if (index == 1)
                {
                    return "T";
                }
                else 
                {
                    string result = string.Empty;
                    var first = true;
                    for(var subindex = 1; subindex <= index; subindex++)
                    {
                        if (first)
                        {
                            first = false;
                        }
                        else 
                        {
                            result += ", ";
                        }
                        result += "T" + subindex;
                    }
                    return result;
                }
            }
            else 
            {
                return string.Empty;
            }
        }
    );
#>
// <auto-generated />

using System;
using System.Collections.Generic;
using System.Linq;
using Theraot.Collections.ThreadSafe;

namespace Theraot.Facts
{<#
    for (var index = 1; index <= 7; index++)
    {
            #>

    public abstract class FactCheckBase<<#=Types(index)#>>
    {
        internal IEnumerable<Tuple<<#=Types(index)#>>> GetTuples()
        {       
            var fact = GetFact();
            var data = GetData();
            if (data is IDictionary<int, Predicate<Tuple<<#=Types(index)#>>>>)
            {
                return GetDataPrivate(data as IDictionary<int, Predicate<Tuple<<#=Types(index)#>>>>, fact);
            }
            if (data is SafeSet<Tuple<<#=Types(index)#>>>)
            {
                return data as SafeSet<Tuple<<#=Types(index)#>>>;
            }
            return new Tuple<<#=Types(index)#>>[0];
        }

        private static IEnumerable<Tuple<<#=Types(index)#>>> GetDataPrivate(IDictionary<int, Predicate<Tuple<<#=Types(index)#>>>> data, Fact<<#=Types(index)#>> fact)
        {
            return from pair in data let hash = pair.Key let predicate = pair.Value select fact.Read(hash, predicate) into tuple where tuple != null select tuple;
        }

        internal abstract bool Check(Tuple<<#=Types(index)#>> tuple);

        internal abstract object GetData();

        internal abstract Fact<<#=Types(index)#>> GetFact();
    }

    // ReSharper disable once UnusedTypeParameter
    public abstract class FactCheck<<#=Types(index)#>, TTarget> : FactCheckBase<<#=Types(index)#>>
    {
        // Empty
    }
<#
    }#>
}