using System;
using System.Collections.Generic;
using Theraot.Collections.Specialized;
using Theraot.Collections.ThreadSafe;
using Theraot.Threading.Needles;

namespace Theraot.Facts
{<#
    for (var indice = 2; indice < 9; indice++)
    {
#>
    
    [Serializable]
    public class Fact<# if (indice != 0) {#><<# if (indice == 1) #>T<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>T<#=subindice#><#}#>><#}#>

    {
<#
    for (var subindice = 1; subindice <= indice; subindice++)
    {
#>
        private readonly IEqualityComparer<T<#=subindice#>> _comparer<#=subindice#>;
<#
    }
#>
        private readonly SafeSet<Tuple<# if (indice != 0) {#><<# if (indice == 1) #>T<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>T<#=subindice#><#}#>><#}#>> _data;
<#
    for (var subindice = 1; subindice <= indice; subindice++)
    {
#>
        private readonly NullAwareDictionary<T<#=subindice#>, List<int>> _index<#=subindice#>;
<#
    }
#>
        private readonly TupleEqualityComparer<# if (indice != 0) {#><<# if (indice == 1) #>T<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>T<#=subindice#><#}#>><#}#> _tupleComparer;

        public Fact()
        {
<#
    for (var subindice = 1; subindice <= indice; subindice++)
    {
#>
            _comparer<#=subindice#> = EqualityComparer<T<#=subindice#>>.Default;
<#
    }
#>
            _tupleComparer = TupleEqualityComparer<# if (indice != 0) {#><<# if (indice == 1) #>T<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>T<#=subindice#><#}#>><#}#>.Default;
<#
    for (var subindice = 1; subindice <= indice; subindice++)
    {
#>
            _index<#=subindice#> = new NullAwareDictionary<T<#=subindice#>, List<int>>(_comparer<#=subindice#>);
<#
    }
#>
            _data = new SafeSet<Tuple<# if (indice != 0) {#><<# if (indice == 1) #>T<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>T<#=subindice#><#}#>><#}#>>(_tupleComparer);
        }

        public void Add(<# if (indice != 0) {#><# if (indice == 1) #>T obj<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>T<#=subindice#> arg<#=subindice#><#}#><#}#>)
        {
            var neo = new Tuple<# if (indice != 0) {#><<# if (indice == 1) #>T<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>T<#=subindice#><#}#>><#}#>(<# if (indice != 0) {#><# if (indice == 1) #>obj<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>arg<#=subindice#><#}#><#}#>);
            var hash = _tupleComparer.GetHashCode(neo);
            if (_data.Add(neo))
            {
<#
    for (var subindice = 1; subindice <= indice; subindice++)
    {
#>
                _index<#=subindice#>.Add(arg<#=subindice#>, hash);
<#
    }
#>
            }
        }

        public bool Query(<# if (indice != 0) {#><# if (indice == 1) #>T obj<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>T<#=subindice#> arg<#=subindice#><#}#><#}#>)
        {
            Tuple<# if (indice != 0) {#><<# if (indice == 1) #>T<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>T<#=subindice#><#}#>><#}#> bundle;
            Predicate<Tuple<# if (indice != 0) {#><<# if (indice == 1) #>T<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>T<#=subindice#><#}#>><#}#>> predicate = tuple => _tupleComparer.Equals(tuple, <# if (indice != 0) {#><# if (indice == 1) #>obj<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>arg<#=subindice#><#}#><#}#>);
            return _data.TryGetValue(_tupleComparer.GetHashCode(<# if (indice != 0) {#><# if (indice == 1) #>obj<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>arg<#=subindice#><#}#><#}#>), predicate, out bundle);
        }

        public Tuple<# if (indice != 0) {#><<# if (indice == 1) #>T<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>T<#=subindice#><#}#>><#}#> Read(<# if (indice != 0) {#><# if (indice == 1) #>T obj<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>T<#=subindice#> arg<#=subindice#><#}#><#}#>)
        {
            Tuple<# if (indice != 0) {#><<# if (indice == 1) #>T<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>T<#=subindice#><#}#>><#}#> found;
            Predicate<Tuple<# if (indice != 0) {#><<# if (indice == 1) #>T<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>T<#=subindice#><#}#>><#}#>> predicate = tuple => _tupleComparer.Equals(tuple, <# if (indice != 0) {#><# if (indice == 1) #>obj<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>arg<#=subindice#><#}#><#}#>);
            if (_data.TryGetValue(_tupleComparer.GetHashCode(<# if (indice != 0) {#><# if (indice == 1) #>obj<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>arg<#=subindice#><#}#><#}#>), predicate, out found))
            {
                return found;
            }
            return null;
        }

        public IEnumerable<Tuple<# if (indice != 0) {#><<# if (indice == 1) #>T<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>T<#=subindice#><#}#>><#}#>> Read(<# if (indice != 0) {#><# if (indice == 1) #>Needle<T> obj = null<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>Needle<T<#=subindice#>> arg<#=subindice#> = null<#}#><#}#>)
        {
<#
    for (var subindice = 1; subindice <= indice; subindice++)
    {
#>
            T<#=subindice#> _arg<#=subindice#>;
<#
    }
#>
<#
    var first = true;
    for (var master = indice; master > 0; master --)
    {
#>
<#
    for (var subindice = 1 + indice - master; subindice <= indice; subindice++)
    {
#>
<#=new string(' ', 4 * (master - 1 - (indice - subindice)))#>            <#
    if (!first && subindice == 1 + indice - master)
    {
#>else <#
    }
#>if (arg<#=subindice#>.TryGetValue(out _arg<#=subindice#>))
<#=new string(' ', 4 * (master - 1 - (indice - subindice)))#>            {
<#
    }
#>
<#
    if (first)
    {
#>
<#=new string(' ', 4 * (master - 1))#>                return new[] {Read(<# if (indice != 0) {#><# for (var subindice_1 = 1; subindice_1 <= indice; subindice_1++){ if (subindice_1 != 1) {#>, <#}#>_arg<#=subindice_1#><#}#><#}#>)};
<#
        first = false;
    }
    else
    {
        if (1 + indice - master == 8)
        {
#>
<#=new string(' ', 4 * (master - 1))#>                Predicate<Tuple<# if (indice != 0) {#><<# if (indice == 1) #>T<# else for (var subindice_1 = 1; subindice_1 <= indice; subindice_1++){ if (subindice_1 != 1) {#>, <#}#>T<#=subindice_1#><#}#>><#}#>> predicate = tuple => _comparer<#=1 + indice - master#>.Equals(tuple.Rest, _arg<#=1 + indice - master#>)
<#
        }
        else
        {
#>
<#=new string(' ', 4 * (master - 1))#>                Predicate<Tuple<# if (indice != 0) {#><<# if (indice == 1) #>T<# else for (var subindice_1 = 1; subindice_1 <= indice; subindice_1++){ if (subindice_1 != 1) {#>, <#}#>T<#=subindice_1#><#}#>><#}#>> predicate = tuple => _comparer<#=1 + indice - master#>.Equals(tuple.Item<#=1 + indice - master#>, _arg<#=1 + indice - master#>)
<#
        }
    for (var subindice_1 = 1 + indice - master + 1; subindice_1 < indice + 1; subindice_1++)
    {
        if (subindice_1 == 8)
        {
#>
<#=new string(' ', 4 * (master - 1))#>                                                                  && _comparer<#=subindice_1#>.Equals(tuple.Rest, _arg<#=subindice_1#>)
<#
        }
        else
        {
#>
<#=new string(' ', 4 * (master - 1))#>                                                                  && _comparer<#=subindice_1#>.Equals(tuple.Item<#=subindice_1#>, _arg<#=subindice_1#>)
<#
        }
    }
#>
<#=new string(' ', 4 * (master - 1))#>                                                                  ;
<#=new string(' ', 4 * (master - 1))#>                return PrivateRead(_index<#=1 + indice - master#>, _arg<#=1 + indice - master#>, predicate);
<#
    }
#>
<#
    for (var subindice = indice; subindice >= 1 + indice - master; subindice--)
    {
#>
<#=new string(' ', 4 * (master - 1 - (indice - subindice)))#>            }
<#
    if (subindice > 1 + indice - master)
    {
#>
<#=new string(' ', 4 * (master - 1 - (indice - subindice)))#>            else
<#=new string(' ', 4 * (master - 1 - (indice - subindice)))#>            {
<#=new string(' ', 4 * (master - 1 - (indice - subindice)))#>                Predicate<Tuple<# if (indice != 0) {#><<# if (indice == 1) #>T<# else for (var subindice_1 = 1; subindice_1 <= indice; subindice_1++){ if (subindice_1 != 1) {#>, <#}#>T<#=subindice_1#><#}#>><#}#>> predicate = tuple => _comparer<#=1 + indice - master#>.Equals(tuple.Item<#=1 + indice - master#>, _arg<#=1 + indice - master#>)
<#
for (var subindice_1 = 1 + indice - master + 1; subindice_1 < subindice; subindice_1++)
    {
        if (subindice_1 == 8)
        {
#>
<#=new string(' ', 4 * (master - 1 - (indice - subindice)))#>                                                                  && _comparer<#=subindice_1#>.Equals(tuple.Rest, _arg<#=subindice_1#>)
<#
        }
        else
        {
#>
<#=new string(' ', 4 * (master - 1 - (indice - subindice)))#>                                                                  && _comparer<#=subindice_1#>.Equals(tuple.Item<#=subindice_1#>, _arg<#=subindice_1#>)
<#
        }
    }
#>
<#
    for (var subindice_1 = subindice + 1; subindice_1 < indice + 1; subindice_1++)
    {
        if (subindice_1 == 8)
        {
#>
<#=new string(' ', 4 * (master - 1 - (indice - subindice)))#>                                                                  && Check<#=subindice_1#>(arg<#=subindice_1#>, tuple.Rest)
<#
        }
        else
        {
#>
<#=new string(' ', 4 * (master - 1 - (indice - subindice)))#>                                                                  && Check<#=subindice_1#>(arg<#=subindice_1#>, tuple.Item<#=subindice_1#>)
<#
         }
    }
#>
<#=new string(' ', 4 * (master - 1 - (indice - subindice)))#>                                                                  ;
<#=new string(' ', 4 * (master - 1 - (indice - subindice)))#>                return PrivateRead(_index<#=1 + indice - master#>, _arg<#=1 + indice - master#>, predicate);
<#=new string(' ', 4 * (master - 1 - (indice - subindice)))#>            }
<#
    }
#>
<#
    }
#>
<#
    }
#>
            throw new ArgumentException();
        }

        public void Remove(<# if (indice != 0) {#><# if (indice == 1) #>Needle<T> obj = null<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>Needle<T<#=subindice#>> arg<#=subindice#> = null<#}#><#}#>)
        {
<#
    for (var subindice = 1; subindice <= indice; subindice++)
    {
#>
            T<#=subindice#> _arg<#=subindice#>;
<#
    }
#>
<#
    first = true;
    for (var master = indice; master > 0; master --)
    {
#>
<#
    for (var subindice = 1 + indice - master; subindice <= indice; subindice++)
    {
#>
<#=new string(' ', 4 * (master - 1 - (indice - subindice)))#>            <#
    if (!first && subindice == 1 + indice - master)
    {
#>else <#
    }
#>if (arg<#=subindice#>.TryGetValue(out _arg<#=subindice#>))
<#=new string(' ', 4 * (master - 1 - (indice - subindice)))#>            {
<#
    }
#>
<#
    if (first)
    {
#>
<#=new string(' ', 4 * (master - 1))#>                Remove(<# if (indice != 0) {#><# for (var subindice_1 = 1; subindice_1 <= indice; subindice_1++){ if (subindice_1 != 1) {#>, <#}#>_arg<#=subindice_1#><#}#><#}#>);
<#
        first = false;
    }
    else
    {
        if (1 + indice - master == 8)
        {
#>
<#=new string(' ', 4 * (master - 1))#>                Predicate<Tuple<# if (indice != 0) {#><<# if (indice == 1) #>T<# else for (var subindice_1 = 1; subindice_1 <= indice; subindice_1++){ if (subindice_1 != 1) {#>, <#}#>T<#=subindice_1#><#}#>><#}#>> predicate = tuple => _comparer<#=1 + indice - master#>.Equals(tuple.Rest, _arg<#=1 + indice - master#>)
<#
        }
        else
        {
#>
<#=new string(' ', 4 * (master - 1))#>                Predicate<Tuple<# if (indice != 0) {#><<# if (indice == 1) #>T<# else for (var subindice_1 = 1; subindice_1 <= indice; subindice_1++){ if (subindice_1 != 1) {#>, <#}#>T<#=subindice_1#><#}#>><#}#>> predicate = tuple => _comparer<#=1 + indice - master#>.Equals(tuple.Item<#=1 + indice - master#>, _arg<#=1 + indice - master#>)
<#
        }
    for (var subindice_1 = 1 + indice - master + 1; subindice_1 < indice + 1; subindice_1++)
    {
        if (subindice_1 == 8)
        {
#>
<#=new string(' ', 4 * (master - 1))#>                                                                  && _comparer<#=subindice_1#>.Equals(tuple.Rest, _arg<#=subindice_1#>)
<#
        }
        else
        {
#>
<#=new string(' ', 4 * (master - 1))#>                                                                  && _comparer<#=subindice_1#>.Equals(tuple.Item<#=subindice_1#>, _arg<#=subindice_1#>)
<#
        }
    }
#>
<#=new string(' ', 4 * (master - 1))#>                                                                  ;
<#=new string(' ', 4 * (master - 1))#>                PrivateRemove(_index<#=1 + indice - master#>, _arg<#=1 + indice - master#>, predicate);
<#
    }
#>
<#
    for (var subindice = indice; subindice >= 1 + indice - master; subindice--)
    {
#>
<#=new string(' ', 4 * (master - 1 - (indice - subindice)))#>            }
<#
    if (subindice > 1 + indice - master)
    {
#>
<#=new string(' ', 4 * (master - 1 - (indice - subindice)))#>            else
<#=new string(' ', 4 * (master - 1 - (indice - subindice)))#>            {
<#=new string(' ', 4 * (master - 1 - (indice - subindice)))#>                Predicate<Tuple<# if (indice != 0) {#><<# if (indice == 1) #>T<# else for (var subindice_1 = 1; subindice_1 <= indice; subindice_1++){ if (subindice_1 != 1) {#>, <#}#>T<#=subindice_1#><#}#>><#}#>> predicate = tuple => _comparer<#=1 + indice - master#>.Equals(tuple.Item<#=1 + indice - master#>, _arg<#=1 + indice - master#>)
<#
    for (var subindice_1 = 1 + indice - master + 1; subindice_1 < subindice; subindice_1++)
    {
        if (subindice_1 == 8)
        {
#>
<#=new string(' ', 4 * (master - 1 - (indice - subindice)))#>                                                                  && _comparer<#=subindice_1#>.Equals(tuple.Rest, _arg<#=subindice_1#>)
<#
        }
        else
        {
#>
<#=new string(' ', 4 * (master - 1 - (indice - subindice)))#>                                                                  && _comparer<#=subindice_1#>.Equals(tuple.Item<#=subindice_1#>, _arg<#=subindice_1#>)
<#
        }
    }
#>
<#
    for (var subindice_1 = subindice + 1; subindice_1 < indice + 1; subindice_1++)
    {
        if (subindice_1 == 8)
        {
#>
<#=new string(' ', 4 * (master - 1 - (indice - subindice)))#>                                                                  && Check<#=subindice_1#>(arg<#=subindice_1#>, tuple.Rest)
<#
        }
        else
        {
#>
<#=new string(' ', 4 * (master - 1 - (indice - subindice)))#>                                                                  && Check<#=subindice_1#>(arg<#=subindice_1#>, tuple.Item<#=subindice_1#>)
<#
         }
    }
#>
<#=new string(' ', 4 * (master - 1 - (indice - subindice)))#>                                                                  ;
<#=new string(' ', 4 * (master - 1 - (indice - subindice)))#>                PrivateRemove(_index<#=1 + indice - master#>, _arg<#=1 + indice - master#>, predicate);
<#=new string(' ', 4 * (master - 1 - (indice - subindice)))#>            }
<#
    }
#>
<#
    }
#>
<#
    }
#>
        }

        public void Remove(<# if (indice != 0) {#><# if (indice == 1) #>T obj<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>T<#=subindice#> arg<#=subindice#><#}#><#}#>)
        {
            var hash = _tupleComparer.GetHashCode(<# if (indice != 0) {#><# if (indice == 1) #>obj<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>arg<#=subindice#><#}#><#}#>);
            Predicate<Tuple<# if (indice != 0) {#><<# if (indice == 1) #>T<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>T<#=subindice#><#}#>><#}#>> predicate = tuple => _tupleComparer.Equals(tuple, <# if (indice != 0) {#><# if (indice == 1) #>obj<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>arg<#=subindice#><#}#><#}#>);
            Tuple<# if (indice != 0) {#><<# if (indice == 1) #>T<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>T<#=subindice#><#}#>><#}#> removed;
            if (_data.Remove(hash, predicate, out removed))
            {
<#
    for (var subindice_2 = 1; subindice_2 <= indice; subindice_2++)
    {
#>
                _index<#=subindice_2#>.Remove(arg<#=subindice_2#>, hash);
<#
    }
#>
            }
        }
<#
    for (var subindice_1 = 3; subindice_1 <= indice; subindice_1++)
    {
#>

        private bool Check<#=subindice_1#>(Needle<T<#=subindice_1#>> arg, T<#=subindice_1#> obj)
        {
            T<#=subindice_1#> tmp;
            return !arg.TryGetValue(out tmp) || _comparer<#=subindice_1#>.Equals(tmp, obj);
        }
<#
    }
#>

        private IEnumerable<Tuple<# if (indice != 0) {#><<# if (indice == 1) #>T<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>T<#=subindice#><#}#>><#}#>> PrivateRead<T>(NullAwareDictionary<T, List<int>> index, T arg, Predicate<Tuple<# if (indice != 0) {#><<# if (indice == 1) #>T<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>T<#=subindice#><#}#>><#}#>> predicate)
        {
            if (index.ContainsKey(arg))
            {
                foreach (var hash in index[arg])
                {
                    Tuple<# if (indice != 0) {#><<# if (indice == 1) #>T<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>T<#=subindice#><#}#>><#}#> found;
                    if (_data.TryGetValue(hash, predicate, out found))
                    {
                        yield return found;
                    }
                }
            }
        }

        private void PrivateRemove<T>(NullAwareDictionary<T, List<int>> index, T arg, Predicate<Tuple<# if (indice != 0) {#><<# if (indice == 1) #>T<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>T<#=subindice#><#}#>><#}#>> predicate)
        {
            if (index.ContainsKey(arg))
            {
                foreach (var hash in index[arg])
                {
                    Tuple<# if (indice != 0) {#><<# if (indice == 1) #>T<# else for (var subindice = 1; subindice <= indice; subindice++){ if (subindice != 1) {#>, <#}#>T<#=subindice#><#}#>><#}#> found;
                    _data.Remove(hash, predicate, out found);
                }
            }
        }
}
<#
    }
#>}