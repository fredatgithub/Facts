<#@ template debug="false" hostspecific="false" language="C#" #>
<#
    var Arguments = new Func<int, string>
    (
        (int index) =>
        {
            if (index != 0)
            {
                if (index == 1)
                {
                    return "obj";
                }
                else 
                {
                    string result = string.Empty;
                    var first = true;
                    for(var subindex = 1; subindex <= index; subindex++)
                    {
                        if (first)
                        {
                            first = false;
                        }
                        else 
                        {
                            result += ", ";
                        }
                        result += "arg" + subindex;
                    }
                    return result;
                }
            }
            else 
            {
                return string.Empty;
            }
        }
    );

    var Parameters = new Func<int, string>
    (
        (int index) =>
        {
            if (index != 0)
            {
                if (index == 1)
                {
                    return "T obj";
                }
                else 
                {
                    string result = string.Empty;
                    var first = true;
                    for(var subindex = 1; subindex <= index; subindex++)
                    {
                        if (first)
                        {
                            first = false;
                        }
                        else 
                        {
                            result += ", ";
                        }
                        result += "T" + subindex + " arg" + subindex;
                    }
                    return result;
                }
            }
            else 
            {
                return string.Empty;
            }
        }
    );

    var Types = new Func<int, string>
    (
        (int index) =>
        {
            if (index != 0)
            {
                if (index == 1)
                {
                    return "T";
                }
                else 
                {
                    string result = string.Empty;
                    var first = true;
                    for(var subindex = 1; subindex <= index; subindex++)
                    {
                        if (first)
                        {
                            first = false;
                        }
                        else 
                        {
                            result += ", ";
                        }
                        result += "T" + subindex;
                    }
                    return result;
                }
            }
            else 
            {
                return string.Empty;
            }
        }
    );
#>
// <auto-generated />

using System;
using System.Collections.Generic;

namespace Theraot.Facts
{
    public class Fact
    {<#
    for (var index = 1; index <= 7; index++)
    {
            #>
        
        public static IEnumerable<Tuple<<#=Types(index)#>>> Query<<#=Types(index)#>>(FactCheckBase<<#=Types(index)#>> check)
        {
            var data = check.GetData();
            if (data is IEnumerable<Tuple<<#=Types(index)#>>>)
            {
                return data as IEnumerable<Tuple<<#=Types(index)#>>>;
            }
            if (data is IDictionary<int, Predicate<Tuple<<#=Types(index)#>>>>)
            {
                return PrivateQuery(data as IDictionary<int, Predicate<Tuple<<#=Types(index)#>>>>, check.GetFact());
            }
            return new Tuple<<#=Types(index)#>>[0];
        }

        private static IEnumerable<Tuple<<#=Types(index)#>>> PrivateQuery<<#=Types(index)#>>(IDictionary<int, Predicate<Tuple<<#=Types(index)#>>>> data, Fact<<#=Types(index)#>> fact)
        {
            foreach (var pair in data)
            {
                yield return fact.Read(pair.Key, pair.Value);
            }
        }

        public static void Remove<<#=Types(index)#>>(FactCheckBase<<#=Types(index)#>> check)
        {
            var data = check.GetData();
            var fact = check.GetFact();
            if (data is IEnumerable<Tuple<<#=Types(index)#>>>)
            {
                var toRemove = new List<Tuple<<#=Types(index)#>>>(data as IEnumerable<Tuple<<#=Types(index)#>>>);
                foreach(var tuple in toRemove)
                {
                    fact.Remove(tuple);
                }
            }
            if (data is IDictionary<int, Predicate<Tuple<<#=Types(index)#>>>>)
            {
                var toRemove = new List<KeyValuePair<int, Predicate<Tuple<<#=Types(index)#>>>>>(data as IDictionary<int, Predicate<Tuple<<#=Types(index)#>>>>);
                foreach(var pair in toRemove)
                {
                    fact.Remove(pair.Key, pair.Value);
                }
            }
        }
<#
    }#>
    }
}